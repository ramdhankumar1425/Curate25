{
  "type": "directory",
  "name": "root",
  "children": [
    {
      "type": "directory",
      "name": "src",
      "children": [
        {
          "type": "file",
          "name": "index.css",
          "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;"
        },
        {
          "type": "file",
          "name": "main.jsx",
          "content": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />)"
        },
        {
          "type": "file",
          "name": "App.jsx",
          "content": "import React from 'react';\nimport ChatInterface from './components/ChatInterface';\n\nconst App = () => {\n    return (\n        <div className=\"min-h-screen bg-gray-100\">\n            <ChatInterface />\n        </div>\n    );\n};\n\nexport default App;"
        },
        {
          "type": "directory",
          "name": "components",
          "children": [
            {
              "type": "file",
              "name": "ChatInterface.jsx",
              "content": "import React, { useState } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\n\nconst ChatInterface = () => {\n    const [messages, setMessages] = useState([]);\n\n    const handleSendMessage = (text) => {\n        const newMessage = {\n            id: Date.now(),\n            text,\n            timestamp: new Date().toLocaleTimeString(),\n            isSent: true\n        };\n        setMessages([...messages, newMessage]);\n        \n        // Simulate received message\n        setTimeout(() => {\n            const receivedMessage = {\n                id: Date.now() + 1,\n                text: 'Thanks for your message!',\n                timestamp: new Date().toLocaleTimeString(),\n                isSent: false\n            };\n            setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        }, 1000);\n    };\n\n    return (\n        <div className=\"flex justify-center items-center min-h-screen p-4\">\n            <div className=\"w-full max-w-2xl bg-white rounded-lg shadow-lg\">\n                <div className=\"p-4 border-b border-gray-200\">\n                    <h1 className=\"text-xl font-semibold text-gray-800\">Chat Interface</h1>\n                </div>\n                <MessageList messages={messages} />\n                <MessageInput onSendMessage={handleSendMessage} />\n            </div>\n        </div>\n    );\n};\n\nexport default ChatInterface;"
            },
            {
              "type": "file",
              "name": "MessageList.jsx",
              "content": "import React from 'react';\n\nconst MessageList = ({ messages }) => {\n    return (\n        <div className=\"h-[400px] overflow-y-auto p-4\">\n            {messages.map(message => (\n                <div\n                    key={message.id}\n                    className={`flex ${message.isSent ? 'justify-end' : 'justify-start'} mb-4`}\n                >\n                    <div className={`max-w-[70%] rounded-lg p-3 ${\n                        message.isSent \n                            ? 'bg-blue-500 text-white' \n                            : 'bg-gray-200 text-gray-800'\n                    }`}>\n                        <p>{message.text}</p>\n                        <span className={`text-xs ${\n                            message.isSent ? 'text-blue-100' : 'text-gray-500'\n                        }`}>\n                            {message.timestamp}\n                        </span>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default MessageList;"
            },
            {
              "type": "file",
              "name": "MessageInput.jsx",
              "content": "import React, { useState } from 'react';\n\nconst MessageInput = ({ onSendMessage }) => {\n    const [message, setMessage] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (message.trim()) {\n            onSendMessage(message);\n            setMessage('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"p-4 border-t border-gray-200\">\n            <div className=\"flex gap-2\">\n                <input\n                    type=\"text\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    className=\"flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500\"\n                    placeholder=\"Type a message...\"\n                />\n                <button\n                    type=\"submit\"\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors\"\n                >\n                    Send\n                </button>\n            </div>\n        </form>\n    );\n};\n\nexport default MessageInput;"
            }
          ]
        }
      ]
    },
    {
      "type": "file",
      "name": "index.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple Chat Interface</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n</body>\n</html>"
    }
  ]
}