{
  "type": "directory",
  "name": "root",
  "children": [
    {
      "type": "directory",
      "name": "src",
      "children": [
        {
          "type": "file",
          "name": "index.css",
          "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;"
        },
        {
          "type": "file",
          "name": "main.jsx",
          "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />);"
        },
        {
          "type": "file",
          "name": "App.jsx",
          "content": "import React from 'react';\nimport Calculator from './components/Calculator';\n\nconst App = () => {\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center p-4\">\n      <Calculator />\n    </div>\n  );\n};\n\nexport default App;"
        },
        {
          "type": "directory",
          "name": "components",
          "children": [
            {
              "type": "file",
              "name": "Calculator.jsx",
              "content": "import React, { useState } from 'react';\nimport Display from './Display';\nimport KeyPad from './KeyPad';\n\nconst Calculator = () => {\n  const [display, setDisplay] = useState('0');\n  const [equation, setEquation] = useState('');\n  const [lastPressed, setLastPressed] = useState('');\n\n  const handleNumber = (number) => {\n    if (display === '0' || lastPressed === '=') {\n      setDisplay(number);\n      setEquation(number);\n    } else {\n      setDisplay(display + number);\n      setEquation(equation + number);\n    }\n    setLastPressed(number);\n  };\n\n  const handleOperator = (operator) => {\n    if (lastPressed !== '' && !isNaN(lastPressed)) {\n      setDisplay(operator);\n      setEquation(equation + operator);\n      setLastPressed(operator);\n    }\n  };\n\n  const handleDecimal = () => {\n    if (!display.includes('.') && lastPressed !== '=') {\n      setDisplay(display + '.');\n      setEquation(equation + '.');\n      setLastPressed('.');\n    }\n  };\n\n  const handleClear = () => {\n    setDisplay('0');\n    setEquation('');\n    setLastPressed('');\n  };\n\n  const handleCalculate = () => {\n    try {\n      const result = eval(equation);\n      if (!isFinite(result)) {\n        throw new Error('Division by zero');\n      }\n      setDisplay(result.toString());\n      setEquation(result.toString());\n      setLastPressed('=');\n    } catch (error) {\n      setDisplay('Error');\n      setEquation('');\n      setLastPressed('');\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-800 p-4 rounded-lg shadow-lg max-w-xs w-full\">\n      <Display value={display} equation={equation} />\n      <KeyPad \n        onNumber={handleNumber}\n        onOperator={handleOperator}\n        onDecimal={handleDecimal}\n        onClear={handleClear}\n        onCalculate={handleCalculate}\n      />\n    </div>\n  );\n};\n\nexport default Calculator;"
            },
            {
              "type": "file",
              "name": "Display.jsx",
              "content": "import React from 'react';\n\nconst Display = ({ value, equation }) => {\n  return (\n    <div className=\"bg-gray-700 p-4 rounded-lg mb-4\">\n      <div className=\"text-gray-400 text-sm h-6 overflow-hidden\">\n        {equation}\n      </div>\n      <div className=\"text-white text-2xl font-bold text-right overflow-hidden\">\n        {value}\n      </div>\n    </div>\n  );\n};\n\nexport default Display;"
            },
            {
              "type": "file",
              "name": "KeyPad.jsx",
              "content": "import React from 'react';\n\nconst KeyPad = ({ onNumber, onOperator, onDecimal, onClear, onCalculate }) => {\n  const buttons = [\n    { label: 'C', className: 'bg-red-500', onClick: onClear },\n    { label: '/', className: 'bg-gray-600', onClick: () => onOperator('/') },\n    { label: '*', className: 'bg-gray-600', onClick: () => onOperator('*') },\n    { label: '7', onClick: () => onNumber('7') },\n    { label: '8', onClick: () => onNumber('8') },\n    { label: '9', onClick: () => onNumber('9') },\n    { label: '-', className: 'bg-gray-600', onClick: () => onOperator('-') },\n    { label: '4', onClick: () => onNumber('4') },\n    { label: '5', onClick: () => onNumber('5') },\n    { label: '6', onClick: () => onNumber('6') },\n    { label: '+', className: 'bg-gray-600', onClick: () => onOperator('+') },\n    { label: '1', onClick: () => onNumber('1') },\n    { label: '2', onClick: () => onNumber('2') },\n    { label: '3', onClick: () => onNumber('3') },\n    { label: '=', className: 'bg-blue-500 row-span-2', onClick: onCalculate },\n    { label: '0', className: 'col-span-2', onClick: () => onNumber('0') },\n    { label: '.', onClick: onDecimal }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-4 gap-2\">\n      {buttons.map((button, index) => (\n        <button\n          key={index}\n          onClick={button.onClick}\n          className={`p-4 text-white rounded-lg hover:opacity-80 transition-opacity ${\n            button.className || 'bg-gray-700'\n          }`}\n        >\n          {button.label}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default KeyPad;"
            }
          ]
        }
      ]
    },
    {
      "type": "file",
      "name": "index.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Basic Calculator App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n</body>\n</html>"
    }
  ]
}