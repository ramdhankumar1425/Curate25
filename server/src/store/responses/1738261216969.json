{
  "type": "directory",
  "name": "root",
  "children": [
    {
      "type": "directory",
      "name": "src",
      "children": [
        {
          "type": "file",
          "name": "index.css",
          "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;"
        },
        {
          "type": "file",
          "name": "main.jsx",
          "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />);"
        },
        {
          "type": "file",
          "name": "App.jsx",
          "content": "import React from 'react';\nimport ChatInterface from './components/ChatInterface';\n\nconst App = () => {\n    return (\n        <div className=\"min-h-screen bg-gray-100\">\n            <ChatInterface />\n        </div>\n    );\n};\n\nexport default App;"
        },
        {
          "type": "directory",
          "name": "components",
          "children": [
            {
              "type": "file",
              "name": "ChatInterface.jsx",
              "content": "import React, { useState } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\n\nconst ChatInterface = () => {\n    const [messages, setMessages] = useState([]);\n\n    const handleSendMessage = (text) => {\n        const newMessage = {\n            id: Date.now(),\n            text,\n            sender: 'user',\n            timestamp: new Date().toLocaleTimeString()\n        };\n        \n        setMessages([...messages, newMessage]);\n        \n        // Simulate received message\n        setTimeout(() => {\n            const receivedMessage = {\n                id: Date.now() + 1,\n                text: 'This is a response message',\n                sender: 'other',\n                timestamp: new Date().toLocaleTimeString()\n            };\n            setMessages(prev => [...prev, receivedMessage]);\n        }, 1000);\n    };\n\n    return (\n        <div className=\"max-w-2xl mx-auto p-4 h-screen flex flex-col\">\n            <div className=\"bg-white rounded-lg shadow-lg flex flex-col flex-1\">\n                <div className=\"p-4 border-b\">\n                    <h1 className=\"text-xl font-semibold\">Chat Interface</h1>\n                </div>\n                <MessageList messages={messages} />\n                <MessageInput onSendMessage={handleSendMessage} />\n            </div>\n        </div>\n    );\n};\n\nexport default ChatInterface;"
            },
            {
              "type": "file",
              "name": "MessageList.jsx",
              "content": "import React from 'react';\nimport MessageItem from './MessageItem';\n\nconst MessageList = ({ messages }) => {\n    return (\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {messages.map(message => (\n                <MessageItem key={message.id} message={message} />\n            ))}\n        </div>\n    );\n};\n\nexport default MessageList;"
            },
            {
              "type": "file",
              "name": "MessageItem.jsx",
              "content": "import React from 'react';\n\nconst MessageItem = ({ message }) => {\n    const isUser = message.sender === 'user';\n    \n    return (\n        <div className={`flex ${isUser ? 'justify-end' : 'justify-start'}`}>\n            <div className={`max-w-[70%] px-4 py-2 rounded-lg ${\n                isUser ? 'bg-blue-500 text-white' : 'bg-gray-200'\n            }`}>\n                <p>{message.text}</p>\n                <span className=\"text-xs opacity-75\">{message.timestamp}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default MessageItem;"
            },
            {
              "type": "file",
              "name": "MessageInput.jsx",
              "content": "import React, { useState } from 'react';\n\nconst MessageInput = ({ onSendMessage }) => {\n    const [message, setMessage] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (message.trim()) {\n            onSendMessage(message);\n            setMessage('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"border-t p-4\">\n            <div className=\"flex gap-2\">\n                <input\n                    type=\"text\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    className=\"flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Type a message...\"\n                />\n                <button\n                    type=\"submit\"\n                    className=\"px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n                >\n                    Send\n                </button>\n            </div>\n        </form>\n    );\n};\n\nexport default MessageInput;"
            }
          ]
        }
      ]
    },
    {
      "type": "file",
      "name": "index.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Real-Time Chat Interface</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n</body>\n</html>"
    }
  ]
}